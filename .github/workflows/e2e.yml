name: e2e

on:
  push:
    branches: [ main ]
    tags: [ 'release/mark-v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1' # weekly govulncheck
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to create (format: release/mark-vMAJOR-MINOR-PATCH)'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  GO_VERSION: '1.23.x'
  GOFLAGS: -mod=readonly

# avoid duplicate concurrent runs per ref
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # --- (optional) owner-initiated tag creation via Run workflow ---
  create-tag:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.tag != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Guard: only repository owner may create tags via dispatch"
        run: |
          if [ "${{ github.actor }}" != "${{ github.repository_owner }}" ]; then
            echo "Only the repository owner may create release tags via dispatch."
            exit 1
          fi
      - name: Validate tag format
        run: |
          TAG="${{ inputs.tag }}"
          if [[ ! "$TAG" =~ ^release/mark-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            echo "Tag must match release/mark-vMAJOR-MINOR-PATCH (e.g. release/mark-v1-2-3)"
            exit 1
          fi
      - name: Create git tag in this repo
        uses: actions/github-script@v7
        with:
          script: |
            const tag = core.getInput('tag') || process.env.TAG;
            const ref = `refs/tags/${tag}`;
            const sha = context.sha;
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref,
              sha
            });
            core.info(`Created ${ref} -> ${sha}`);
        env:
          TAG: ${{ inputs.tag }}

  # --- 1) Build & Test (runs on PRs, main, and tag builds) ---
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install eBPF toolchain (clang/llvm/libbpf + bpftool)
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y clang llvm make gcc libelf-dev libbpf-dev pkg-config
          KREL="$(uname -r)"
          sudo apt-get install -y linux-tools-common linux-tools-generic linux-cloud-tools-generic || true
          sudo apt-get install -y "linux-tools-${KREL}" || true
          BPFOOL=""
          for p in /usr/sbin/bpftool /usr/bin/bpftool "/usr/lib/linux-tools-${KREL}/bpftool" /usr/lib/linux-tools-*/bpftool; do
            if [ -x "$p" ]; then BPFOOL="$p"; break; fi
          done
          if [ -z "$BPFOOL" ]; then
            echo "bpftool not found via apt; building from source..."
            sudo apt-get install -y git build-essential flex bison libcap-dev libzstd-dev
            git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git /tmp/bpf-next
            make -C /tmp/bpf-next/tools/bpf/bpftool
            BPFOOL=/tmp/bpf-next/tools/bpf/bpftool/bpftool
          fi
          echo "BPFOOL=$BPFOOL" >> "$GITHUB_ENV"
          "$BPFOOL" version

      - name: Prebuild eBPF objects
        if: ${{ hashFiles('bpf/Makefile') != '' }}
        working-directory: bpf
        env:
          BPFOOL: ${{ env.BPFOOL }}
        run: make

      - name: Sync modules
        run: |
          go env -w GOPROXY=https://proxy.golang.org,direct
          go mod tidy
          go mod download all

      - name: Build
        run: go build ./...

      - name: Test (race)
        run: go test -race -count=1 ./...

      - name: Verify static builds (sanity)
        run: CGO_ENABLED=0 go build -trimpath -ldflags="-s -w" ./...

  # --- 2) Vulnerability check (gated on build-test) ---
  govulncheck:
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Verify modules resolve (RO mode)
        run: go list ./... >/dev/null
      - name: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: '1.23'
          vulncheck-flags: ./...

  # --- 3) Docker image publish (only on main or release tags; requires CI + vuln) ---
  docker:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/release/mark-v')
    runs-on: ubuntu-latest
    needs: [build-test, govulncheck]   # <-- hard gate
    environment:
      name: release                    # set reviewers in repo Settings > Environments
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Derive RAW_TAG and Docker-safe SAFE_TAG (tag builds)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          RAW_TAG="${GITHUB_REF_NAME}"      # e.g., release/mark-v1-2-3
          SAFE_TAG="${RAW_TAG//\//-}"       # e.g., release-mark-v1-2-3
          echo "RAW_TAG=$RAW_TAG"   >> "$GITHUB_ENV"
          echo "SAFE_TAG=$SAFE_TAG" >> "$GITHUB_ENV"

      - name: Ensure bpftool & build BPF
        shell: bash
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y clang llvm make gcc libelf-dev libbpf-dev pkg-config
          KREL="$(uname -r)"
          sudo apt-get install -y linux-tools-common linux-tools-generic linux-cloud-tools-generic || true
          sudo apt-get install -y "linux-tools-${KREL}" || true
          BPFOOL=""
          for p in /usr/sbin/bpftool /usr/bin/bpftool "/usr/lib/linux-tools-${KREL}/bpftool" /usr/lib/linux-tools-*/bpftool; do
            if [ -x "$p" ]; then BPFOOL="$p"; break; fi
          done
          if [ -z "$BPFOOL" ]; then
            sudo apt-get install -y git build-essential flex bison libcap-dev libzstd-dev
            git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git /tmp/bpf-next
            make -C /tmp/bpf-next/tools/bpf/bpftool
            BPFOOL=/tmp/bpf-next/tools/bpf/bpftool/bpftool
          fi
          echo "BPFOOL=$BPFOOL" >> "$GITHUB_ENV"
          (cd bpf && BPFOOL="$BPFOOL" make)

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            # sanitized tag if this is a tag build
            type=raw,value=${{ env.SAFE_TAG }},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            # branch & sha tags for main
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ env.RAW_TAG }}  # exact repo tag preserved

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # --- 4) GoReleaser (only on release tags; requires CI + vuln) ---
  goreleaser:
    if: startsWith(github.ref, 'refs/tags/release/mark-v')
    runs-on: ubuntu-latest
    needs: [build-test, govulncheck]   # <-- hard gate
    environment:
      name: release                    # set reviewers in repo Settings > Environments
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Derive RAW_TAG for ldflags
        run: |
          RAW_TAG="${GITHUB_REF_NAME}"
          echo "RAW_TAG=$RAW_TAG" >> "$GITHUB_ENV"

      - name: Ensure bpftool & prebuild BPF
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y clang llvm make gcc libelf-dev libbpf-dev pkg-config
          KREL="$(uname -r)"
          sudo apt-get install -y "linux-tools-${KREL}" linux-tools-common || true
          BPFOOL="$(command -v bpftool || true)"
          if [ -z "$BPFOOL" ] && [ -x "/usr/lib/linux-tools-${KREL}/bpftool" ]; then BPFOOL="/usr/lib/linux-tools-${KREL}/bpftool"; fi
          if [ -z "$BPFOOL" ]; then echo "bpftool not found"; exit 1; fi
          echo "BPFOOL=$BPFOOL" >> "$GITHUB_ENV"
          (cd bpf && BPFOOL="$BPFOOL" make)

      - name: Sync modules
        run: |
          go env -w GOPROXY=https://proxy.golang.org,direct
          go mod tidy
          go mod download all

      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          distribution: goreleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # ensure GoReleaser uses the exact repo tag for {{ .Tag }}
          GORELEASER_CURRENT_TAG: ${{ env.RAW_TAG }}