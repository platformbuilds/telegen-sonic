name: e2e

on:
  # 1) Owner/admin manually kicks off a release scan + PR with a tag
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (format: release/mark-vMAJOR-MINOR-PATCH)'
        required: true
        type: string

  # 2) Actual release runs ONLY after the govulncheck PR is merged
  pull_request_target:
    types: [closed]

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  GO_VERSION: '1.23.x'
  RELEASE_TAG: ${{ inputs.tag }}

concurrency:
  group: e2e-${{ github.ref || github.run_id }}
  cancel-in-progress: false

# --------------------------------------------------------------------
# PATH A: Manual dispatch -> create tag, run govulncheck, open PR
# --------------------------------------------------------------------
jobs:
  create-tag:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    name: Create tag (manual, owner/admin only)
    runs-on: ubuntu-latest
    steps:
      - name: Guard: only repository admins/owners may run releases
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner.toLowerCase();
            const repo  = context.repo.repo;
            const actor = context.actor.toLowerCase();

            if (actor === owner) {
              core.info(`Actor ${actor} is repo owner ${owner}; allowed.`);
              return;
            }
            const { data } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner, repo, username: context.actor
            });
            if (data.permission !== 'admin') {
              core.setFailed('Only repository admins/owners may run the release workflow.');
            }

      - name: Validate tag format
        run: |
          TAG="${{ env.RELEASE_TAG }}"
          if [[ ! "$TAG" =~ ^release/mark-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            echo "Tag must match release/mark-vMAJOR-MINOR-PATCH (e.g. release/mark-v1-2-3)"
            exit 1
          fi

      - name: Create git tag (lightweight) if missing
        uses: actions/github-script@v7
        with:
          script: |
            const tag   = process.env.RELEASE_TAG;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            try {
              await github.rest.git.getRef({ owner, repo, ref: `tags/${tag}` });
              core.info(`Tag ${tag} already exists.`);
            } catch (e) {
              if (e.status !== 404) throw e;
              const sha = context.sha;
              await github.rest.git.createRef({ owner, repo, ref: `refs/tags/${tag}`, sha });
              core.info(`Created refs/tags/${tag} -> ${sha}`);
            }

      - name: Ensure draft GitHub Release exists
        uses: actions/github-script@v7
        with:
          script: |
            const tag   = process.env.RELEASE_TAG;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            try {
              const rel = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              core.info(`Release for ${tag} already exists (id=${rel.data.id}).`);
              return;
            } catch (e) {
              if (e.status !== 404) throw e;
            }

            const res = await github.rest.repos.createRelease({
              owner, repo,
              tag_name: tag,
              target_commitish: context.sha,
              name: tag,
              body: `Draft release for **${tag}** (created by workflow). Artifacts will be attached by CI.`,
              draft: true,
              prerelease: false,
              generate_release_notes: true
            });
            core.info(`Created draft release id=${res.data.id} for tag ${tag}.`)

  govulncheck:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    name: Security gate (govulncheck FIRST) + PR
    runs-on: ubuntu-latest
    needs: [create-tag]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify modules resolve (RO mode)
        run: go list ./... >/dev/null

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Run govulncheck (JSON)
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: '1.23'
          go-package: ./...
          output-format: json
          output-file: govuln.json
          check-latest: true
          cache: true

      - name: Compute findings count (no fail)
        id: count
        shell: bash
        run: |
          set -euo pipefail
          COUNT="$(jq -r '.vulns | length' govuln.json)"
          echo "count=${COUNT}" >> "$GITHUB_OUTPUT"
          echo "GOVULN_COUNT=${COUNT}" >> "$GITHUB_ENV"

      - name: Prepare report, README section, and .release/tag
        run: |
          set -euxo pipefail
          TAG="${{ env.RELEASE_TAG }}"
          SAFE_TAG="${TAG//\//-}"
          mkdir -p reports/govulncheck .release
          jq '.' govuln.json > "reports/govulncheck/${SAFE_TAG}.json"
          echo "$TAG" > .release/tag

          COUNT="${GOVULN_COUNT:-0}"
          DATE="$(date -u +'%Y-%m-%d %H:%M:%SZ')"
          LINK="reports/govulncheck/${SAFE_TAG}.json"

          cat > .govul-section.md <<EOF
          <!-- GOVULNCHECK-START -->
          ### govulncheck

          | Field | Value |
          |------:|:------|
          | Tag | **${TAG}** |
          | Scan Time (UTC) | ${DATE} |
          | Findings | **${COUNT}** |
          | Full Report | [${LINK}](${LINK}) |

          _This section is auto-updated by the e2e release workflow._
          <!-- GOVULNCHECK-END -->
          EOF

          if grep -q '<!-- GOVULNCHECK-START -->' README.md; then
            START='<!-- GOVULNCHECK-START -->'
            END='<!-- GOVULNCHECK-END -->'
            awk -v s="$START" -v e="$END" '
              $0 ~ s {print; system("cat .govul-section.md"); skip=1; next}
              $0 ~ e {print; skip=0}
              skip==0 {print}
            ' README.md > README.md.new
            mv README.md.new README.md
          else
            printf "\n%s\n" >> README.md
            cat .govul-section.md >> README.md
          fi

      - name: Create PR with report & README
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(govulncheck): add report for ${{ env.RELEASE_TAG }} and update README"
          branch: "chore/govulncheck-${{ env.RELEASE_TAG && env.RELEASE_TAG != '' && env.RELEASE_TAG || github.run_id }}-${{ github.run_id }}"
          title: "govulncheck: report for ${{ env.RELEASE_TAG }}"
          body: |
            This PR adds the **govulncheck** report for `${{ env.RELEASE_TAG }}` and updates the README summary section.
            Findings: `${{ env.GOVULN_COUNT || '0' }}`
          labels: |
            security
            automated-pr
          delete-branch: true
          token: ${{ secrets.GITHUB_TOKEN }}

# --------------------------------------------------------------------
# PATH B: PR merged -> build, test, image + binaries -> release
# --------------------------------------------------------------------
  release-on-merge:
    if: >
      ${{
        github.event_name == 'pull_request_target' &&
        github.event.pull_request.merged == true &&
        startsWith(github.event.pull_request.head.ref, 'chore/govulncheck-')
      }}
    name: Release after PR merge (owner/admin gate)
    runs-on: ubuntu-latest
    steps:
      - name: Guard: merger must be admin/owner
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const merger = context.payload.pull_request.merged_by?.login;
            if (!merger) core.setFailed('Cannot detect merger.');
            const { data } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner, repo, username: merger
            });
            if (data.permission !== 'admin') {
              core.setFailed(`User ${merger} lacks admin permissions; refusing to release.`);
            }

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Read tag from .release/tag
        id: tagfile
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f .release/tag ]; then
            echo "Missing .release/tag in merged commit." >&2
            exit 1
          fi
          TAG="$(cat .release/tag)"
          if [[ ! "$TAG" =~ ^release/mark-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            echo "Tag in .release/tag has wrong format: $TAG" >&2
            exit 1
          fi
          echo "RELEASE_TAG=$TAG" >> "$GITHUB_ENV"
          echo "SAFE_TAG=${TAG//\//-}" >> "$GITHUB_ENV"

      - name: Ensure tag exists (from dispatch path)
        uses: actions/github-script@v7
        with:
          script: |
            const tag   = process.env.RELEASE_TAG;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            try {
              await github.rest.git.getRef({ owner, repo, ref: `tags/${tag}` });
            } catch (e) {
              core.setFailed(`refs/tags/${tag} does not exist. Run dispatch path first.`);
            }

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install eBPF toolchain (clang/llvm/libbpf + bpftool)
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y clang llvm make gcc libelf-dev libbpf-dev pkg-config
          KREL="$(uname -r)"
          sudo apt-get install -y linux-tools-common linux-tools-generic linux-cloud-tools-generic || true
          sudo apt-get install -y "linux-tools-${KREL}" || true
          BPFOOL=""
          for p in /usr/sbin/bpftool /usr/bin/bpftool "/usr/lib/linux-tools-${KREL}/bpftool" /usr/lib/linux-tools-*/bpftool; do
            if [ -x "$p" ]; then BPFOOL="$p"; break; fi
          done
          if [ -z "$BPFOOL" ]; then
            echo "bpftool not found via apt; building from source..."
            sudo apt-get install -y git build-essential flex bison libcap-dev libzstd-dev
            git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git /tmp/bpf-next
            make -C /tmp/bpf-next/tools/bpf/bpftool
            BPFOOL=/tmp/bpf-next/tools/bpf/bpftool/bpftool
          fi
          echo "BPFOOL=$BPFOOL" >> "$GITHUB_ENV"
          "$BPFOOL" version

      - name: Prebuild eBPF objects
        if: ${{ hashFiles('bpf/Makefile') != '' }}
        working-directory: bpf
        env:
          BPFOOL: ${{ env.BPFOOL }}
        run: make

      - name: Sync modules
        run: |
          go env -w GOPROXY=https://proxy.golang.org,direct
          go mod tidy
          go mod download all

      - name: Build & Test (race)
        run: |
          go build ./...
          go test -race -count=1 ./...

      # -------- Docker release (image tag exactly matches release tag) --------
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ env.SAFE_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ env.RELEASE_TAG }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -------- GoReleaser (binaries) with the same tag --------
      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          distribution: goreleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ env.RELEASE_TAG }}