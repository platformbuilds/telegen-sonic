name: release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          cache: true

      - name: Install eBPF toolchain (bpftool, clang/llvm)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            clang llvm make gcc libelf-dev libbpf-dev pkg-config

          KREL="$(uname -r)"
          sudo apt-get install -y "linux-tools-$KREL" || true

          BP=""
          if command -v bpftool >/dev/null 2>&1; then
            BP="$(command -v bpftool)"
          elif [ -x "/usr/lib/linux-tools-$KREL/bpftool" ]; then
            BP="/usr/lib/linux-tools-$KREL/bpftool"
          fi

          if [ -n "$BP" ]; then
            echo "Found bpftool at $BP"
            echo "BPFOOL=$BP" >> "$GITHUB_ENV"
          else
            echo "bpftool not found"
            exit 1
          fi

      - name: Prebuild eBPF objects
        if: ${{ hashFiles('bpf/Makefile') != '' }}
        working-directory: bpf
        run: make
        env:
          BPFOOL: ${{ env.BPFOOL }}

      - name: Prebuild eBPF objects (safe if present)
        if: ${{ hashFiles('bpf/Makefile') != '' && env.BPFOOL != '' }}
        working-directory: bpf
        run: make
        env:
          BPFOOL: ${{ env.BPFOOL }}

      - name: Sync modules (tidy + download)
        run: |
          go env -w GOPROXY=https://proxy.golang.org,direct
          go mod tidy
          go mod download all

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          distribution: goreleaser

      - name: Release with GoReleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goreleaser release --clean